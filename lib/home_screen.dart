

import 'dart:io';
import 'dart:typed_data';

import 'package:flutter/material.dart';
import 'package:image_generator/api_services.dart';
import 'package:image_generator/colors.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:screenshot/screenshot.dart';
import 'package:share_plus/share_plus.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {

  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    requestPermision();
  }

  Future<void> requestPermision() async{
   var status = await Permission.storage.request();
    if (status.isGranted) {
      // Permission is granted, proceed with file operations
    } else if (status.isDenied) {
      await Permission.storage.request();
      // Permission is denied
      // You can show a dialog or display a message to inform the user about the importance of the permission
    } else if (status.isPermanentlyDenied) {
      await Permission.storage.request();
      // Permission is permanently denied
      // You can show a dialog or display a message with instructions on how to grant the permission from the device settings
    }
  }

  var sizes = ["Small","Medium","Large"];
  var values = ["256x256","512x512","1024x1024"];
  String? dropValue;
  var textController = TextEditingController();
  String image ='';
  bool isLoaded = false;

  ScreenshotController screenshotController = ScreenshotController();


  shareImage() async{
    await screenshotController.capture(delay: Duration(milliseconds: 100),pixelRatio: 1.0).then((Uint8List? img) async{
      if(img!=null){
        final directory = (await getApplicationDocumentsDirectory()).path;
        final filename = "share.png";
        final imgPath = await File("${directory}/$filename").create();
        await imgPath.writeAsBytes(img);

        Share.shareFiles([imgPath.path],text: "Generated by Ai - mourya Devs");
      }
      else{
        print("Failed to take screenshot");
      }
    });
  }

  downloading() async{
    var result = await Permission.storage.request();
    //  ScaffoldMessenger.of(context).showSnackBar(
    //       SnackBar(content: Text("$result"),)
    //     );
    if(result.isGranted){
      final foldername = "Ai Image";
      final path = Directory("storage/emulated/0/$foldername");
      final filename = "${DateTime.now().microsecondsSinceEpoch}.png";
      if(await path.exists()){
        await screenshotController.captureAndSave(path.path,delay: Duration(milliseconds: 100),fileName:filename,pixelRatio: 1.0 );
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("Image downloded to ${path.path}"),)
        );
      }
      else{
        await path.create();
        await screenshotController.captureAndSave(path.path,delay: Duration(milliseconds: 100),fileName:filename,pixelRatio: 1.0 );
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("Image downloded to ${path.path}"),)
        );
      }
    }
    else{
       ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text("Please enable storage permission"),)
        );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      resizeToAvoidBottomInset: false,
      appBar: AppBar(
        // actions: [
        //   Padding(
        //     padding: const EdgeInsets.only(top: 8,bottom: 8,right: 12,left: 8),
        //     child: ElevatedButton(
        //       style: ElevatedButton.styleFrom(
        //         padding: const EdgeInsets.all(8.0),
        //         backgroundColor: btnColor,
        //       ),
        //       onPressed: () {
                
        //       }, 
        //       child: const Text("My Arts"),
        //     ),
        //   )
        // ],
        centerTitle: true,
        title:const Text("Image Generator",style: TextStyle(
          fontFamily: "poppins_bold",
          color: Colors.white
        ),),
      ),

      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Column(
          children: [
            Expanded(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.spaceAround,
                children: [
                  Padding(
                    padding: const EdgeInsets.all(10.0),
                    child: Row(
                      children: [
                        Expanded(
                          child: Container(
                            alignment: Alignment.center,
                            height: 44,
                            padding: const EdgeInsets.symmetric(horizontal: 8),
                            decoration: BoxDecoration(
                            color: Colors.white,
                            borderRadius: BorderRadius.circular(12)
                          ),
                            child: TextFormField(
                              controller: textController,
                              decoration:const InputDecoration(
                                hintText: "eg 'A monkey on moon' ",
                                // hintStyle: TextStyle(fontFamily: 'poppins'),
                                border: InputBorder.none,
                              ),
                            ),
                          ),
                        ),
                  
                        const SizedBox(width: 12,),
                  
                        Container(
                          height: 44,
                          padding: const EdgeInsets.symmetric(horizontal: 8,vertical: 2),
                          decoration: BoxDecoration(
                            color: Colors.white,
                            borderRadius: BorderRadius.circular(12)
                          ),
                          child: DropdownButtonHideUnderline(
                            child:DropdownButton(
                              icon:Icon(Icons.expand_more,color: btnColor,) ,
                              value: dropValue,
                              hint: const Text("Choose"),
                              items: List.generate(
                                sizes.length,
                                (index) => DropdownMenuItem(
                                  value: values[index],
                                  child: Text(sizes[index]),
                                )
                              ), 
                              onChanged:(value) {
                                setState(() {
                                  dropValue = value.toString();
                                });
                              },
                            ), 
                          ),
                        )
                      ],
                    ),
                  ),

                  Padding(
                    padding: const EdgeInsets.only(left:8,right: 8),
                    child: SizedBox(
                      height: 44,
                      width: double.infinity-16,
                      child: ElevatedButton(
                        style: ElevatedButton.styleFrom(
                          backgroundColor: btnColor,
                          shape: const StadiumBorder(),
                        ),
                        onPressed: () async {

                          if(textController.text.isNotEmpty && dropValue!.isNotEmpty){
                              setState(() {
                                isLoaded = false;
                              });
                              print("########query->${textController.text} and $dropValue");
                              // image = await Api.generateImage(textController.text, dropValue!);

                              image = await Api.generateImage(
                                textController.text.trim(),
                                1, // Specify the desired number of images to generate
                                dropValue!
                              );

                              setState(() {
                                isLoaded = true;
                              });
                          }
                          else{
                            ScaffoldMessenger.of(context).showSnackBar(
                              const SnackBar(content: Text("Please enter your query and select size"),)
                            );
                          }
                          
                        }, 
                        child: Text("Generate")
                      ),
                    ),
                  )
                ],
              )
            ),
            Expanded(
              flex: 4,
              child: isLoaded ? 
              Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Container(
                    clipBehavior: Clip.antiAlias,
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Screenshot(
                      controller: screenshotController,
                      child: Image.network(image,fit: BoxFit.contain,)
                      )
                  ),

                  const SizedBox(height: 12,),

                  Padding(
                    padding: const EdgeInsets.all(20.0),
                    child: Row(
                      children: [
                        Expanded(
                          child: ElevatedButton.icon(
                            icon: Icon(Icons.download_for_offline_rounded),
                            style: ElevatedButton.styleFrom(
                              padding: const EdgeInsets.all(8.0),
                              backgroundColor: btnColor,
                            ),
                            onPressed: () {
                              downloading();
                            }, 
                            label: const Text("Download"),
                          )
                        ),
                        const SizedBox(width: 12,),
                        ElevatedButton.icon(
                            icon: Icon(Icons.share),
                            style: ElevatedButton.styleFrom(
                              padding: const EdgeInsets.all(8.0),
                              backgroundColor: btnColor,
                  
                            ),
                            onPressed: ()async {
                              await shareImage();
                              ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text("Image shared")));
                            }, 
                            label: const Text("Share"),
                          ),
                      ],
                    ),
                  ),

                ],
              )
               : Padding(
                padding: const EdgeInsets.all(8.0),
                child: Container(
                  alignment: Alignment.center,
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(12),
                    color: Colors.white,
                  ),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Image.asset("assets/loader.gif"),
                      SizedBox(height: 12,),
                      Text(
                        "working on image",
                        style: TextStyle(fontSize: 16.0),
                      )
                    ],
                  )
                ),
              )
            ),
            const Padding(
              padding:  EdgeInsets.all(8.0),
              child:  Text(
                "Developed by Ajay Mourya",
                style: TextStyle(color: Colors.white,fontSize: 14.0),
              ),
            ),
          ],
        ),
      ),
    );
  }
}